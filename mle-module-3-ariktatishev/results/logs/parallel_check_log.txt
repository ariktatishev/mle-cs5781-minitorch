MAP
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_map.<locals>._map, 
/Users/ariktatishev/Documents/Cornell Tech/MLE/workspace/mle-
module-3-ariktatishev/minitorch/fast_ops.py (153)  
================================================================================


Parallel loop listing for  Function tensor_map.<locals>._map, /Users/ariktatishev/Documents/Cornell Tech/MLE/workspace/mle-module-3-ariktatishev/minitorch/fast_ops.py (153) 
----------------------------------------------------------------------------------|loop #ID
    def _map(                                                                     | 
        out: Storage,                                                             | 
        out_shape: Shape,                                                         | 
        out_strides: Strides,                                                     | 
        in_storage: Storage,                                                      | 
        in_shape: Shape,                                                          | 
        in_strides: Strides,                                                      | 
    ) -> None:                                                                    | 
        # Task 3.1.                                                               | 
        if ((len(in_shape) == len(out_shape))                                     | 
                and (in_shape == out_shape).all()---------------------------------| #0
                and (in_strides == out_strides).all()):---------------------------| #1
            for i in prange(len(out)):--------------------------------------------| #2
                out[i] = fn(in_storage[i])                                        | 
        else:                                                                     | 
            for i in prange(len(out)):--------------------------------------------| #3
                in_idx = in_shape.copy()                                          | 
                out_idx = out_shape.copy()                                        | 
                to_index(i, out_shape, out_idx)                                   | 
                broadcast_index(out_idx, out_shape, in_shape, in_idx)             | 
                out[i] = fn(in_storage[index_to_position(in_idx, in_strides)])    | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 4 parallel for-
loop(s) (originating from loops labelled: #0, #1, #2, #3).
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
No allocation hoisting found
None
ZIP
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_zip.<locals>._zip, 
/Users/ariktatishev/Documents/Cornell Tech/MLE/workspace/mle-
module-3-ariktatishev/minitorch/fast_ops.py (200)  
================================================================================


Parallel loop listing for  Function tensor_zip.<locals>._zip, /Users/ariktatishev/Documents/Cornell Tech/MLE/workspace/mle-module-3-ariktatishev/minitorch/fast_ops.py (200) 
-------------------------------------------------------------------------------|loop #ID
    def _zip(                                                                  | 
        out: Storage,                                                          | 
        out_shape: Shape,                                                      | 
        out_strides: Strides,                                                  | 
        a_storage: Storage,                                                    | 
        a_shape: Shape,                                                        | 
        a_strides: Strides,                                                    | 
        b_storage: Storage,                                                    | 
        b_shape: Shape,                                                        | 
        b_strides: Strides,                                                    | 
    ) -> None:                                                                 | 
        # Task 3.1.                                                            | 
        if ((len(a_shape) == len(b_shape))                                     | 
                and (a_strides == b_strides).all()-----------------------------| #4
                and (a_shape == b_shape).all()---------------------------------| #5
                and (b_strides == out_strides).all()):-------------------------| #6
            for i in prange(len(out)):-----------------------------------------| #7
                out[i] = fn(a_storage[i], b_storage[i])                        | 
        else:                                                                  | 
            for i in prange(len((out))):---------------------------------------| #8
                a_idx = a_shape.copy()                                         | 
                b_idx = b_shape.copy()                                         | 
                out_idx = out_shape.copy()                                     | 
                                                                               | 
                to_index(i, out_shape, out_idx)                                | 
                broadcast_index(out_idx, out_shape, a_shape, a_idx)            | 
                broadcast_index(out_idx, out_shape, b_shape, b_idx)            | 
                                                                               | 
                out[i] = fn(a_storage[index_to_position(a_idx, a_strides)],    | 
                            b_storage[index_to_position(b_idx, b_strides)]     | 
                            )                                                  | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 5 parallel for-
loop(s) (originating from loops labelled: #4, #5, #6, #7, #8).
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
No allocation hoisting found
None
REDUCE
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_reduce.<locals>._reduce, 
/Users/ariktatishev/Documents/Cornell Tech/MLE/workspace/mle-
module-3-ariktatishev/minitorch/fast_ops.py (254)  
================================================================================


Parallel loop listing for  Function tensor_reduce.<locals>._reduce, /Users/ariktatishev/Documents/Cornell Tech/MLE/workspace/mle-module-3-ariktatishev/minitorch/fast_ops.py (254) 
-------------------------------------------------------------|loop #ID
    def _reduce(                                             | 
        out: Storage,                                        | 
        out_shape: Shape,                                    | 
        out_strides: Strides,                                | 
        a_storage: Storage,                                  | 
        a_shape: Shape,                                      | 
        a_strides: Strides,                                  | 
        reduce_dim: int,                                     | 
    ) -> None:                                               | 
        # Task 3.1.                                          | 
                                                             | 
        for i in prange(len(out)):---------------------------| #9
            out_idx = out_shape.copy()                       | 
            to_index(i, out_shape, out_idx)                  | 
            output = out[i]                                  | 
            a_pos = index_to_position(out_idx, a_strides)    | 
            strides = a_strides[reduce_dim]                  | 
                                                             | 
            for j in range(a_shape[reduce_dim]):             | 
                output = fn(output, a_storage[a_pos])        | 
                a_pos += strides                             | 
                                                             | 
            out[i] = output                                  | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 1 parallel for-
loop(s) (originating from loops labelled: #9).
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
No allocation hoisting found
None
MATRIX MULTIPLY
 
================================================================================
 Parallel Accelerator Optimizing:  Function _tensor_matrix_multiply, 
/Users/ariktatishev/Documents/Cornell Tech/MLE/workspace/mle-
module-3-ariktatishev/minitorch/fast_ops.py (280)  
================================================================================


Parallel loop listing for  Function _tensor_matrix_multiply, /Users/ariktatishev/Documents/Cornell Tech/MLE/workspace/mle-module-3-ariktatishev/minitorch/fast_ops.py (280) 
-------------------------------------------------------------------------------------------|loop #ID
def _tensor_matrix_multiply(                                                               | 
    out: Storage,                                                                          | 
    out_shape: Shape,                                                                      | 
    out_strides: Strides,                                                                  | 
    a_storage: Storage,                                                                    | 
    a_shape: Shape,                                                                        | 
    a_strides: Strides,                                                                    | 
    b_storage: Storage,                                                                    | 
    b_shape: Shape,                                                                        | 
    b_strides: Strides,                                                                    | 
) -> None:                                                                                 | 
    """                                                                                    | 
    NUMBA tensor matrix multiply function.                                                 | 
                                                                                           | 
    Should work for any tensor shapes that broadcast as long as                            | 
                                                                                           | 
    ```                                                                                    | 
    assert a_shape[-1] == b_shape[-2]                                                      | 
    ```                                                                                    | 
                                                                                           | 
    Optimizations:                                                                         | 
                                                                                           | 
    * Outer loop in parallel                                                               | 
    * No index buffers or function calls                                                   | 
    * Inner loop should have no global writes, 1 multiply.                                 | 
                                                                                           | 
                                                                                           | 
    Args:                                                                                  | 
        out (Storage): storage for `out` tensor                                            | 
        out_shape (Shape): shape for `out` tensor                                          | 
        out_strides (Strides): strides for `out` tensor                                    | 
        a_storage (Storage): storage for `a` tensor                                        | 
        a_shape (Shape): shape for `a` tensor                                              | 
        a_strides (Strides): strides for `a` tensor                                        | 
        b_storage (Storage): storage for `b` tensor                                        | 
        b_shape (Shape): shape for `b` tensor                                              | 
        b_strides (Strides): strides for `b` tensor                                        | 
                                                                                           | 
    Returns:                                                                               | 
        None : Fills in `out`                                                              | 
    """                                                                                    | 
    a_batch_stride = a_strides[0] if a_shape[0] > 1 else 0                                 | 
    b_batch_stride = b_strides[0] if b_shape[0] > 1 else 0                                 | 
                                                                                           | 
    # Task 3.2                                                                             | 
    for i in prange(out_shape[0]):---------------------------------------------------------| #10
        for j in range(out_shape[1]):                                                      | 
            for k in range(out_shape[2]):                                                  | 
                val = 0.0                                                                  | 
                a_inner = i * a_batch_stride + j * a_strides[1]                            | 
                b_inner = i * b_batch_stride + k * b_strides[2]                            | 
                                                                                           | 
                for _ in range(a_shape[2]):                                                | 
                    val += a_storage[a_inner] * b_storage[b_inner]                         | 
                    a_inner += a_strides[2]                                                | 
                    b_inner += b_strides[1]                                                | 
                                                                                           | 
                out[i * out_strides[0] + j * out_strides[1] + k * out_strides[2]] = val    | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 1 parallel for-
loop(s) (originating from loops labelled: #10).
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
No allocation hoisting found
None